{"version":3,"file":"nft.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/lookup-set.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/nft-contract/metadata.ts","../src/nft-contract/internal.ts","../src/nft-contract/series.ts","../src/nft-contract/nft_core.ts","../src/nft-contract/enumeration.ts","../src/nft-contract/approval.ts","../src/nft-contract/royalty.ts","../src/nft-contract/owner.ts","../src/nft-contract/index.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    len() {\n        return this.length;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.len()) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from '../api';\nexport class LookupSet {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    contains(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    // Returns true if the element was present in the set.\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageRemove(storageKey);\n    }\n    // If the set did not have this value present, `true` is returned.\n    // If the set did have this value present, `false` is returned.\n    set(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return !near.storageWrite(storageKey, '');\n    }\n    extend(keys) {\n        for (let key of keys) {\n            this.set(key);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupSet(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.keyIndexPrefix = prefix + \"i\";\n        let indexKey = prefix + \"k\";\n        let indexValue = prefix + \"v\";\n        this.keys = new Vector(indexKey);\n        this.values = new Vector(indexValue);\n    }\n    len() {\n        let keysLen = this.keys.len();\n        let valuesLen = this.values.len();\n        if (keysLen != valuesLen) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        let valuesIsEmpty = this.values.isEmpty();\n        if (keysIsEmpty != valuesIsEmpty) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysIsEmpty;\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    getIndexRaw(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        return indexRaw;\n    }\n    get(key) {\n        let indexRaw = this.getIndexRaw(key);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            let value = this.values.get(index);\n            if (value) {\n                return value;\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return null;\n    }\n    set(key, value) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            return this.values.replace(index, value);\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.keys.push(key);\n            this.values.push(value);\n            return null;\n        }\n    }\n    remove(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastKey = this.keys.get(this.len() - 1);\n                if (!lastKey) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastKey != key) {\n                    let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);\n                    near.storageWrite(lastLookupKey, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.keys.swapRemove(index);\n            return this.values.swapRemove(index);\n        }\n        return null;\n    }\n    clear() {\n        for (let key of this.keys) {\n            let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n            near.storageRemove(indexLookup);\n        }\n        this.keys.clear();\n        this.values.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct UnorderedMap\n        map.length = data.length;\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"k\");\n        map.keys.length = data.keys.length;\n        // reconstruct values Vector\n        map.values = new Vector(data.prefix + \"v\");\n        map.values.length = data.values.length;\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.values = new VectorIterator(unorderedMap.values);\n    }\n    next() {\n        let key = this.keys.next();\n        let value = this.values.next();\n        if (key.done != value.done) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return { value: [key.value, value.value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    len() {\n        return this.elements.len();\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.len() - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct UnorderedSet\n        set.length = data.length;\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { UnorderedSet } from \"near-sdk-js\";\nimport { Contract } from \".\";\n\n//defines the payout type we'll be returning as a part of the royalty standards.\nexport class Payout {\n    payout: { [accountId: string]: bigint };\n    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n        this.payout = payout;\n    }\n}\n\nexport class NFTContractMetadata {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    base_uri?: string;\n    reference?: string;\n    reference_hash?: string;\n    \n    constructor(\n        {\n            spec, \n            name, \n            symbol, \n            icon, \n            baseUri, \n            reference, \n            referenceHash\n        }:{ \n            spec: string, \n            name: string, \n            symbol: string, \n            icon?: string, \n            baseUri?: string, \n            reference?: string, \n            referenceHash?: string\n        }) {\n        this.spec = spec  // required, essentially a version like \"nft-1.0.0\"\n        this.name = name  // required, ex. \"Mosaics\"\n        this.symbol = symbol // required, ex. \"MOSAIC\"\n        this.icon = icon // Data URL\n        this.base_uri = baseUri // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs\n        this.reference = reference // URL to a JSON file with more info\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n    media_hash?: string;\n    copies?: number;\n    issued_at?: string;\n    expires_at?: string;\n    starts_at?: string;\n    updated_at?: string;\n    extra?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            title, \n            description, \n            media, \n            mediaHash, \n            copies, \n            issuedAt, \n            expiresAt, \n            startsAt, \n            updatedAt, \n            extra, \n            reference, \n            referenceHash\n        }:{\n            title?: string, \n            description?: string, \n            media?: string, \n            mediaHash?: string, \n            copies?: number, \n            issuedAt?: string, \n            expiresAt?: string, \n            startsAt?: string, \n            updatedAt?: string, \n            extra?: string, \n            reference?: string, \n            referenceHash?: string}\n        ) {\n        this.title = title // ex. \"Arch Nemesis: Mail Carrier\" or \"Parcel #5055\"\n        this.description = description // free-form description\n        this.media = media // URL to associated media, preferably to decentralized, content-addressed storage\n        this.media_hash = mediaHash // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.\n        this.copies = copies // number of copies of this set of metadata in existence when token was minted.\n        this.issued_at = issuedAt // ISO 8601 datetime when token was issued or minted\n        this.expires_at = expiresAt // ISO 8601 datetime when token expires\n        this.starts_at = startsAt // ISO 8601 datetime when token starts being valid\n        this.updated_at = updatedAt // ISO 8601 datetime when token was last updated\n        this.extra = extra // anything extra the NFT wants to store on-chain. Can be stringified JSON.\n        this.reference = reference // URL to an off-chain JSON file with more info.\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class Token {\n    series_id: number;\n    owner_id: string;\n    approved_account_ids: { [accountId: string]: number };\n    next_approval_id: number;\n\n    constructor({\n        series_id,\n        owner_id,\n        approved_account_ids,\n        next_approval_id\n    }:{\n        series_id: number,\n        owner_id: string,\n        approved_account_ids: { [accountId: string]: number },\n        next_approval_id: number\n    }) {\n        this.series_id = series_id\n        this.owner_id = owner_id\n        this.approved_account_ids = approved_account_ids\n        this.next_approval_id = next_approval_id\n    }\n}\n\n//The Json token is what will be returned from view calls. \nexport class JsonToken {\n    series_id: number;\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n    approved_account_ids: { [accountId: string]: number };\n    royalty: { [accountId: string]: number };\n\n    constructor({ \n        seriesId,\n        tokenId, \n        ownerId, \n        metadata, \n        approvedAccountIds, \n        royalty \n    }:{\n        seriesId: number,\n        tokenId: string,\n        ownerId: string,\n        metadata: TokenMetadata,\n        approvedAccountIds: { [accountId: string]: number },\n        royalty: { [accountId: string]: number }\n    }) {\n        this.series_id = seriesId\n        //token ID\n        this.token_id = tokenId,\n        //owner of the token\n        this.owner_id = ownerId,\n        //token metadata\n        this.metadata = metadata,\n        //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n        this.approved_account_ids = approvedAccountIds,\n        //keep track of the royalty percentages for the token in a hash map\n        this.royalty = royalty\n    }\n}\n\n//The Json token is what will be returned from view calls. \nexport class JsonSeries {\n    series_id: number;\n    metadata: TokenMetadata;\n    royalty: { [accountId: string]: number };\n    owner_id: string;\n\n    constructor({\n        seriesId,\n        metadata,\n        ownerId,\n        royalty\n    }: {\n        seriesId: number,\n        metadata: TokenMetadata,\n        ownerId: string,\n        royalty: { [accountId: string]: number }\n    } ) {\n        //series ID\n        this.series_id = seriesId,\n        //token metadata\n        this.metadata = metadata,\n        //owner of the token\n        this.owner_id = ownerId,\n        //keep track of the royalty percentages for the token in a hash map\n        this.royalty = royalty\n    }\n}\n\n//The Json token is what will be returned from view calls. \nexport class Series {\n    metadata: TokenMetadata;\n    royalty: { [accountId: string]: number };\n    owner_id: string;\n    tokens: UnorderedSet;\n\n    constructor({\n        metadata,\n        ownerId,\n        royalty,\n        tokens\n    }: {\n        metadata: TokenMetadata,\n        ownerId: string,\n        royalty: { [accountId: string]: number },\n        tokens: UnorderedSet\n    } ) {\n        //token metadata\n        this.metadata = metadata,\n        //owner of the token\n        this.owner_id = ownerId,\n        //keep track of the royalty percentages for the token in a hash map\n        this.royalty = royalty,\n        //list of tokens in the series\n        this.tokens = tokens\n    }\n}\n\n//get the information for a specific token ID\nexport function internalNftMetadata({\n    contract\n}:{\n    contract: Contract\n}): NFTContractMetadata {\n    return contract.metadata;\n}","import { assert, near, UnorderedSet, Vector } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { Token } from \"./metadata\";\n\n// Gets a collection and deserializes it into a set that can be used.\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\n//convert the royalty percentage and amount to pay into a payout (U128)\nexport function royaltyToPayout(royaltyPercentage: number, amountToPay: bigint): string {\n    return (BigInt(royaltyPercentage) * BigInt(amountToPay) / BigInt(10000)).toString();\n}\n\n//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. \nexport function refundApprovedAccountIdsIter(accountId: string, approvedAccountIds: string[]) {\n    //get the storage total by going through and summing all the bytes for each approved account IDs\n    let storageReleased = approvedAccountIds.map(e => bytesForApprovedAccountId(e)).reduce((partialSum, a) => partialSum + a, 0);\n    let amountToTransfer = BigInt(storageReleased) * near.storageByteCost().valueOf();\n    \n    // Send the money to the beneficiary (TODO: don't use batch actions)\n    const promise = near.promiseBatchCreate(accountId);\n    near.promiseBatchActionTransfer(promise, amountToTransfer)\n}\n\n//refund a map of approved account IDs and send the funds to the passed in account ID\nexport function refundApprovedAccountIds(accountId: string, approvedAccountIds: { [key: string]: number }) {\n    //call the refundApprovedAccountIdsIter with the approved account IDs as keys\n    refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds));\n}\n\n//refund the initial deposit based on the amount of storage that was used up\nexport function refundDeposit(storageUsed: bigint) {\n    //get how much it would cost to store the information\n    let requiredCost = storageUsed * near.storageByteCost().valueOf()\n    //get the attached deposit\n    let attachedDeposit = near.attachedDeposit().valueOf();\n\n    //make sure that the attached deposit is greater than or equal to the required cost\n    assert(\n        requiredCost <= attachedDeposit,\n        `Must attach ${requiredCost} yoctoNEAR to cover storage`\n    )\n\n    //get the refund amount from the attached deposit - required cost\n    let refund = attachedDeposit - requiredCost;\n    near.log(`Refunding ${refund} yoctoNEAR`);\n\n    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount\n    if (refund > 1) {\n        // Send the money to the beneficiary (TODO: don't use batch actions)\n        const promise = near.promiseBatchCreate(near.predecessorAccountId());\n        near.promiseBatchActionTransfer(promise, refund)\n    }\n}\n\n//calculate how many bytes the account ID is taking up\nexport function bytesForApprovedAccountId(accountId: string): number {\n    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.\n    return accountId.length + 4 + 8;\n}\n\n//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)\nexport function assertAtLeastOneYocto() {\n    assert(near.attachedDeposit().valueOf() >= BigInt(1), \"Requires attached deposit of at least 1 yoctoNEAR\");\n}\n\n//used to make sure the user attached exactly 1 yoctoNEAR\nexport function assertOneYocto() {\n    assert(near.attachedDeposit().toString() === \"1\", \"Requires attached deposit of exactly 1 yoctoNEAR\");\n}\n\n//add a token to the set of tokens an owner has\nexport function internalAddTokenToOwner(contract: Contract, accountId: string, tokenId: string) {\n    //get the set of tokens for the given account\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if(tokenSet == null) {\n        //if the account doesn't have any tokens, we create a new unordered set\n        tokenSet = new UnorderedSet(\"tokensPerOwner\" + accountId.toString());\n    }\n\n    //we insert the token ID into the set\n    tokenSet.set(tokenId);\n\n    //we insert that set for the given account ID. \n    contract.tokensPerOwner.set(accountId, tokenSet);\n}\n\n//remove a token from an owner (internal method and can't be called directly via CLI).\nexport function internalRemoveTokenFromOwner(contract: Contract, accountId: string, tokenId: string) {\n    //we get the set of tokens that the owner has\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there is no set of tokens for the owner, we panic with the following message:\n    if (tokenSet == null) {\n        near.panic(\"Token should be owned by the sender\");\n    }\n\n    //we remove the the token_id from the set of tokens\n    tokenSet.remove(tokenId)\n\n    //if the token set is now empty, we remove the owner from the tokens_per_owner collection\n    if (tokenSet.isEmpty()) {\n        contract.tokensPerOwner.remove(accountId);\n    } else { //if the token set is not empty, we simply insert it back for the account ID. \n        contract.tokensPerOwner.set(accountId, tokenSet);\n    }\n}\n\n//transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).\nexport function internalTransfer(contract: Contract, senderId: string, receiverId: string, tokenId: string, approvalId: number, memo: string): Token {\n    //get the token object by passing in the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token found\");\n    }\n\n    //if the sender doesn't equal the owner, we check if the sender is in the approval list\n    if (senderId != token.owner_id) {\n        //if the token's approved account IDs doesn't contain the sender, we panic\n        if (!token.approved_account_ids.hasOwnProperty(senderId)) {\n            near.panic(\"Unauthorized\");\n        }\n\n        // If they included an approval_id, check if the sender's actual approval_id is the same as the one included\n        if (approvalId != null) {\n            //get the actual approval ID\n            let actualApprovalId = token.approved_account_ids[senderId];\n            //if the sender isn't in the map, we panic\n            if (actualApprovalId == null) {\n                near.panic(\"Sender is not approved account\");\n            }\n\n            //make sure that the actual approval ID is the same as the one provided\n            assert(actualApprovalId == approvalId, `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`);\n        }\n    }\n\n    //we make sure that the sender isn't sending the token to themselves\n    assert(token.owner_id != receiverId, \"The token owner and the receiver should be different\")\n\n    //we remove the token from it's current owner's set\n    internalRemoveTokenFromOwner(contract, token.owner_id, tokenId);\n    //we then add the token to the receiver_id's set\n    internalAddTokenToOwner(contract, receiverId, tokenId);\n\n    //we create a new token struct \n    let newToken = new Token ({\n        series_id: token.series_id,\n        owner_id: receiverId,\n        //reset the approval account IDs\n        // @ts-ignore\n        approvedAccountIds: {},\n        nextApprovalId: token.next_approval_id,\n    });\n\n    //insert that new token into the tokens_by_id, replacing the old entry \n    contract.tokensById.set(tokenId, newToken);\n\n    //if there was some memo attached, we log it. \n    if (memo != null) {\n        near.log(`Memo: ${memo}`);\n    }\n\n    // Default the authorized ID to be None for the logs.\n    let authorizedId;\n\n    //if the approval ID was provided, set the authorized ID equal to the sender\n    if (approvalId != null) {\n        authorizedId = senderId\n    }\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: token.owner_id,\n                // The account ID of the new owner of the token.\n                new_owner_id: receiverId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            }\n        ]\n    }\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return the previous token object that was transferred.\n    return token\n}","import { assert, near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { internalAddTokenToOwner, refundDeposit } from \"./internal\";\nimport { Series, Token, TokenMetadata } from \"./metadata\";\n\nexport function internalMint({\n    contract,\n    id,\n    receiverId\n}:{\n    contract: Contract,\n    id: number,\n    receiverId: string\n}): void {\n    //measure the initial storage being used on the contract TODO\n    let initialStorageUsage = near.storageUsage();\n\n    let predecessor = near.predecessorAccountId();\n    if(predecessor != near.currentAccountId()) {\n        assert(contract.approvedMinters.contains(predecessor), \"Not approved minter\");\n    }\n    \n    // @ts-ignore\n    let series = contract.seriesById.get(id) as Series;\n    if (series == null) {\n        near.panic(\"no series\");\n    }\n    let tokens = UnorderedSet.deserialize(series.tokens as UnorderedSet);\n    let curLen = tokens.len();\n    if(series.metadata.copies != null) {\n        assert(curLen < series.metadata.copies, \"Series is full\");\n    }\n\n    let tokenId = `${id}:${curLen + 1}`;\n    tokens.set(tokenId);\n    series.tokens = tokens;\n    // @ts-ignore\n    contract.seriesById.set(id, series);\n\n    //specify the token struct that contains the owner ID \n    let token = new Token ({\n        series_id: id,\n        //set the owner ID equal to the receiver ID passed into the function\n        owner_id: receiverId,\n        //we set the approved account IDs to the default value (an empty map)\n        approved_account_ids: {},\n        //the next approval ID is set to 0\n        next_approval_id: 0\n    });\n\n    //insert the token ID and token struct and make sure that the token doesn't exist\n    assert(contract.tokensById.get(tokenId) == null, \"Token already exists\");\n    contract.tokensById.set(tokenId, token)\n\n    //call the internal method for adding the token to the owner\n    internalAddTokenToOwner(contract, token.owner_id, tokenId)\n\n    // Construct the mint log as per the events standard.\n    let nftMintLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_mint\",\n        data: [\n            {\n                // Owner of the token.\n                owner_id: token.owner_id,\n                // Vector of token IDs that were minted.\n                token_ids: [tokenId],\n            }\n        ]\n    }\n    \n    // Log the json.\n    near.log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`);\n\n    //calculate the required storage which was the used - initial TODO\n    let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();\n\n    //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.\n    refundDeposit(requiredStorageInBytes);\n}\n\nexport function internalCreateSeries({\n    contract,\n    id,\n    metadata,\n    royalty\n}:{\n    contract: Contract,\n    id: number,\n    metadata: TokenMetadata,\n    royalty: { [accountId: string]: number }\n}): void {\n    //measure the initial storage being used on the contract TODO\n    let initialStorageUsage = near.storageUsage();\n\n    let predecessor = near.predecessorAccountId();\n    if(predecessor != near.currentAccountId()) {\n        assert(contract.approvedMinters.contains(predecessor), \"Not approved minter\");\n    }\n    // @ts-ignore\n    assert(contract.seriesById.get(id) == null, \"Series already exists\");\n    let series = new Series({\n        metadata,\n        royalty,\n        tokens: new UnorderedSet(`${id}${predecessor}`),\n        ownerId: predecessor\n    });\n    // @ts-ignore\n    contract.seriesById.set(id, series);\n\n    //calculate the required storage which was the used - initial TODO\n    let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();\n\n    //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.\n    refundDeposit(requiredStorageInBytes);\n}\n\nexport function internalUpdateSeriesId({\n    contract,\n    currentId,\n    newId\n}:{\n    contract: Contract,\n    currentId: number,\n    newId: number\n}): void {\n    let caller = near.predecessorAccountId();\n    // @ts-ignore\n    let series = contract.seriesById.get(currentId) as Series;\n    if (series == null) {\n        near.panic(\"no series\");\n    }\n    assert(series.owner_id == caller, \"Not owner\");\n    // @ts-ignore\n    assert(contract.seriesById.get(newId) == null, \"New Series already exists\");\n    // @ts-ignore\n    contract.seriesById.remove(currentId);\n    // @ts-ignore\n    contract.seriesById.set(newId, series);\n}","import { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertOneYocto, internalAddTokenToOwner, internalRemoveTokenFromOwner, internalTransfer, refundDeposit, refundApprovedAccountIds } from \"./internal\";\nimport { JsonToken, Series, Token, TokenMetadata } from \"./metadata\";\n\nconst GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;\nconst GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000;\n\n//get the information for a specific token ID\nexport function internalNftToken({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n    // @ts-ignore\n    let curSeries = contract.seriesById.get(token.series_id) as Series;\n    if (curSeries == null) {\n        near.panic(\"no series\");\n    }\n    let metadata = curSeries.metadata;\n    let editionNumber = tokenId.split(\":\")[1];\n\n    if (metadata.title != null) {\n        metadata.title = `${metadata.title} - ${editionNumber}`;\n    } else {\n        metadata.title = `Series ${token.series_id} : Edition ${editionNumber}`;\n    }\n\n    let jsonToken = new JsonToken({\n        seriesId: token.series_id,\n        tokenId: tokenId,\n        metadata: metadata,\n        ownerId: token.owner_id,\n        approvedAccountIds: token.approved_account_ids,\n        royalty: curSeries.royalty\n    });\n\n    return jsonToken;\n}\n\n//implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. \nexport function internalNftTransfer({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n}:{\n    contract: Contract, \n    receiverId: string, \n    tokenId: string, \n    approvalId: number\n    memo: string\n}) {\n    //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    //we refund the owner for releasing the storage used up by the approved account IDs\n    refundApprovedAccountIds(\n        previousToken.owner_id,\n        previousToken.approved_account_ids\n    );\n}\n\n//implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\nexport function internalNftTransferCall({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    msg\n}:{\n    contract: Contract,\n    receiverId: string, \n    tokenId: string, \n    approvalId: number,\n    memo: string,\n    msg: string  \n}) {\n    //assert that the user attached exactly 1 yocto for security reasons. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    // Initiating receiver's call and the callback\n    const promise = near.promiseBatchCreate(receiverId);\n    near.promiseBatchActionFunctionCall(\n        promise, \n        \"nft_on_transfer\", \n        bytes(JSON.stringify({ \n            sender_id: senderId,\n            previous_owner_id: previousToken.owner_id,\n            token_id: tokenId,\n            msg\n        })), \n        0, // no deposit \n        GAS_FOR_NFT_ON_TRANSFER\n    );\n\n    // We then resolve the promise and call nft_resolve_transfer on our own contract\n    near.promiseThen(\n        promise, \n        near.currentAccountId(), \n        \"nft_resolve_transfer\", \n        bytes(JSON.stringify({\n            owner_id: previousToken.owner_id,\n            receiver_id: receiverId,\n            token_id: tokenId,\n            approved_account_ids: previousToken.approved_account_ids\n        })), \n        0, // no deposit \n        GAS_FOR_RESOLVE_TRANSFER\n    );\n    return near.promiseReturn(promise);\n}\n\n//resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n//returns true if the token was successfully transferred to the receiver_id\nexport function internalResolveTransfer({\n    contract,\n    authorizedId,\n    ownerId,\n    receiverId,\n    tokenId,\n    approvedAccountIds,\n    memo\n}:{\n    contract: Contract,\n    authorizedId: string,\n    ownerId: string,\n    receiverId: string,\n    tokenId: string,\n    approvedAccountIds: { [key: string]: number },\n    memo: string    \n}) {\n    assert(near.currentAccountId() === near.predecessorAccountId(), \"Only the contract itself can call this method\");\n    // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`\n    // call result.\n    let result = near.promiseResult(0);\n    if (typeof result === 'string') {\n        //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not\n        //if we need don't need to return the token, we simply return true meaning everything went fine\n        if (result === 'false') {\n            /* \n                since we've already transferred the token and nft_on_transfer returned false, we don't have to \n                revert the original transfer and thus we can just return true since nothing went wrong.\n            */\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            return true;\n        }\n    }\n\n    //get the token object if there is some token object\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token != null) {\n        if (token.owner_id != receiverId) {\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            // The token is not owner by the receiver anymore. Can't return it.\n            return true;\n        }\n    //if there isn't a token object, it was burned and so we return true\n    } else {\n        //we refund the owner for releasing the storage used up by the approved account IDs\n        refundApprovedAccountIds(ownerId, approvedAccountIds);\n        return true;\n    }\n\n    //we remove the token from the receiver\n    internalRemoveTokenFromOwner(contract, receiverId, tokenId);\n    //we add the token to the original owner\n    internalAddTokenToOwner(contract, ownerId, tokenId);\n\n    //we change the token struct's owner to be the original owner \n    token.owner_id = ownerId\n\n    //we refund the receiver any approved account IDs that they may have set on the token\n    refundApprovedAccountIds(receiverId, token.approved_account_ids);\n    //reset the approved account IDs to what they were before the transfer\n    token.approved_account_ids = approvedAccountIds;\n\n    //we inset the token b  ack into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    /*\n        We need to log that the NFT was reverted back to the original owner.\n        The old_owner_id will be the receiver and the new_owner_id will be the\n        original owner of the token since we're reverting the transfer.\n    */\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: receiverId,\n                // The account ID of the new owner of the token.\n                new_owner_id: ownerId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            }\n        ]\n    }\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return false\n    return false\n}","import { near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { restoreOwners } from \"./internal\";\nimport { JsonSeries, JsonToken, Series } from \"./metadata\";\nimport { internalNftToken } from \"./nft_core\";\n\n//Query for the total supply of NFTs on the contract\nexport function internalTotalSupply({\n    contract\n}:{\n    contract: Contract\n}): number {\n    //return the length of the tokens by ID\n    return contract.tokensById.len();\n}\n\n//Query for nft tokens on the contract regardless of the owner using pagination\nexport function internalNftTokens({\n    contract,\n    fromIndex,\n    limit\n}:{ \n    contract: Contract, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    let tokens = [];\n\n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = contract.tokensById.toArray();\n    // Paginate through the keys using the fromIndex and limit\n    for (let i = start; i < keys.length && i < start + max; i++) {\n        // get the token object from the keys\n        let jsonToken = internalNftToken({contract, tokenId: keys[i][0]});\n        tokens.push(jsonToken);\n    }\n    return tokens;\n}\n\n//get the total supply of NFTs for a given owner\nexport function internalSupplyForOwner({\n    contract,\n    accountId\n}:{\n    contract: Contract, \n    accountId: string\n}): number {\n    //get the set of tokens for the passed in owner\n    let tokens = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokens == null) {\n        return 0\n    }\n\n    //if there is some set of tokens, we'll return the length \n    return tokens.len();\n}\n\n//Query for all the tokens for an owner\nexport function internalTokensForOwner({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}:{\n    contract: Contract, \n    accountId: string, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    //get the set of tokens for the passed in owner\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokenSet == null) {\n        return [];\n    }\n    \n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let tokens: JsonToken[] = []\n    for(let i = start; i < max; i++) {\n        if(i >= keys.length) {\n            break;\n        }\n        let token = internalNftToken({contract, tokenId: keys[i]});\n        tokens.push(token);\n    }\n    return tokens;\n}\n\n// Get the total supply of series on the contract\nexport function internalSupplySeries({\n    contract\n}:{\n    contract: Contract, \n}): number {\n    //return the length of the tokens by ID\n    return contract.seriesById.len();\n}\n\n//Query for nft tokens on the contract regardless of the owner using pagination\nexport function internalSeries({\n    contract,\n    fromIndex,\n    limit\n}:{ \n    contract: Contract, \n    fromIndex?: string, \n    limit?: number\n}): JsonSeries[] {\n    let tokens = [];\n\n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = contract.seriesById.toArray();\n    // Paginate through the keys using the fromIndex and limit\n    for (let i = start; i < keys.length && i < start + max; i++) {\n        // get the token object from the keys\n        // @ts-ignore\n        let jsonToken = internalSeriesInfo({contract, id: keys[i][0]});\n        tokens.push(jsonToken);\n    }\n    return tokens;\n}\n\n//get the information for a specific token ID\nexport function internalSeriesInfo({\n    contract,\n    id\n}:{ \n    contract: Contract, \n    id: number \n}) {\n    // @ts-ignore\n    let series = contract.seriesById.get(id) as Series;\n    //if there wasn't a series in the seriesById collection, we return None\n    if (series == null) {\n        return null;\n    }\n\n    //we return the JsonSeries\n    let jsonSeries = new JsonSeries({\n        seriesId: id,\n        metadata: series.metadata,\n        royalty: series.royalty,\n        ownerId: series.owner_id\n    });\n    return jsonSeries;\n}\n\n//get the information for a specific token ID\nexport function internalNftSupplyForSeries({\n    contract,\n    id\n}:{ \n    contract: Contract, \n    id: number \n}) {\n    // @ts-ignore\n    let series = contract.seriesById.get(id) as Series;\n    //if there wasn't a series in the seriesById collection, we return None\n    if (series == null) {\n        return 0;\n    }\n\n    let tokens = UnorderedSet.deserialize(series.tokens as UnorderedSet);\n    return tokens.len();\n}\n\n// Paginate through all the tokens for a series\nexport function internalNftTokensForSeries({\n    contract,\n    id,\n    fromIndex,\n    limit\n}:{ \n    contract: Contract, \n    id: number, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    // @ts-ignore\n    let series = contract.seriesById.get(id) as Series;\n    //if there wasn't a series in the seriesById collection, we return None\n    if (series == null) {\n        return [];\n    }\n    \n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let tokens = UnorderedSet.deserialize(series.tokens as UnorderedSet);\n    let keys = tokens.toArray();\n    let jsonTokens: JsonToken[] = []\n    for(let i = start; i < max; i++) {\n        if(i >= keys.length) {\n            break;\n        }\n        let token = internalNftToken({contract, tokenId: keys[i]});\n        jsonTokens.push(token);\n    }\n    return jsonTokens;\n}","import { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter } from \"./internal\";\nimport { Token } from \"./metadata\";\n\nconst GAS_FOR_NFT_ON_APPROVE = 35_000_000_000_000;\n\n//approve an account ID to transfer a token on your behalf\nexport function internalNftApprove({\n    contract,\n    tokenId,\n    accountId,\n    msg\n}:{ \n    contract: Contract, \n    tokenId: string, \n    accountId: string, \n    msg: string \n}) {\n    /*\n        assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.\n        The user needs to attach enough to pay for storage on the contract\n    */\n    assertAtLeastOneYocto();\n\n    //get the token object from the token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n    //make sure that the person calling the function is the owner of the token\n    assert(near.predecessorAccountId() === token.owner_id, \"Predecessor must be the token owner\");\n\n    //get the next approval ID if we need a new approval\n    let approvalId = token.next_approval_id;\n\n    //check if the account has been approved already for this token\n    let isNewApproval = token.approved_account_ids.hasOwnProperty(accountId);\n    token.approved_account_ids[accountId] = approvalId;\n\n    //if it was a new approval, we need to calculate how much storage is being used to add the account.\n    let storageUsed = isNewApproval ? bytesForApprovedAccountId(accountId) : 0;\n\n    //increment the token's next approval ID by 1\n    token.next_approval_id += 1;\n    //insert the token back into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    //refund any excess storage attached by the user. If the user didn't attach enough, panic. \n    refundDeposit(BigInt(storageUsed));\n    \n    //if some message was passed into the function, we initiate a cross contract call on the\n    //account we're giving access to. \n    if (msg != null) {\n        // Initiating receiver's call and the callback\n        const promise = near.promiseBatchCreate(accountId);\n        near.promiseBatchActionFunctionCall(\n            promise, \n            \"nft_on_approve\", \n            bytes(JSON.stringify({ \n                token_id: tokenId,\n                owner_id: token.owner_id,\n                approval_id: approvalId,\n                msg\n            })), \n            0, // no deposit \n            GAS_FOR_NFT_ON_APPROVE\n        );\n\n        near.promiseReturn(promise);\n    }\n}\n\n//check if the passed in account has access to approve the token ID\nexport function internalNftIsApproved({\n    contract,\n    tokenId,\n    approvedAccountId,\n    approvalId\n}:{ \n    contract: Contract, \n    tokenId: string,\n    approvedAccountId: string, \n    approvalId: number \n}) {\n    //get the token object from the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the approval number for the passed in account ID\n    let approval = token.approved_account_ids[approvedAccountId];\n\n    //if there was no approval ID found for the account ID, we simply return false\n    if (approval == null) {\n        return false\n    }\n\n    //if there was some approval ID found for the account ID\n    //if there was no approval_id passed into the function, we simply return true\n    if (approvalId == null) {\n        return true\n    }\n\n    //if a specific approval_id was passed into the function\n    //return if the approval ID passed in matches the actual approval ID for the account\n    return approvalId == approval;\n}\n\n//revoke a specific account from transferring the token on your behalf\nexport function internalNftRevoke({\n    contract,\n    tokenId,\n    accountId\n}:{ \n    contract: Contract, \n    tokenId: string, \n    accountId: string \n}) {\n    //assert that the user attached exactly 1 yoctoNEAR for security reasons\n    assertOneYocto();\n\n    //get the token object using the passed in token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the caller of the function and assert that they are the owner of the token\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n     \n    //if the account ID was in the token's approval, we remove it\n    if (token.approved_account_ids.hasOwnProperty(accountId)) {\n        delete token.approved_account_ids[accountId];\n        \n        //refund the funds released by removing the approved_account_id to the caller of the function\n        refundApprovedAccountIdsIter(predecessorAccountId, [accountId]);\n        \n        //insert the token back into the tokens_by_id collection with the account_id removed from the approval list\n        contract.tokensById.set(tokenId, token);\n    }\n}\n\n//revoke all accounts from transferring the token on your behalf\nexport function internalNftRevokeAll({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    //assert that the caller attached exactly 1 yoctoNEAR for security\n    assertOneYocto();\n\n    //get the token object from the passed in token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the caller and make sure they are the owner of the tokens\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n\n    //only revoke if the approved account IDs for the token is not empty\n    if (token.approved_account_ids && Object.keys(token.approved_account_ids).length === 0 && Object.getPrototypeOf(token.approved_account_ids) === Object.prototype) {\n        //refund the approved account IDs to the caller of the function\n        refundApprovedAccountIds(predecessorAccountId, token.approved_account_ids);\n        //clear the approved account IDs\n        token.approved_account_ids = {};\n        //insert the token back into the tokens_by_id collection with the approved account IDs cleared\n        contract.tokensById.set(tokenId, token);\n    }\n}","import { assert, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, internalTransfer, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter, royaltyToPayout } from \"./internal\";\nimport { Series, Token } from \"./metadata\";\n\n//calculates the payout for a token given the passed in balance. This is a view method\nexport function internalNftPayout({\n    contract,\n    tokenId,\n    balance,\n    maxLenPayout\n}:{\n    contract: Contract, \n    tokenId: string,\n    balance: bigint, \n    maxLenPayout: number,\n}): { payout: {[key: string]: string }} {\n    //get the token object\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the owner of the token\n    let ownerId = token.owner_id;\n    //keep track of the total perpetual royalties\n    let totalPerpetual = 0;\n    //keep track of the payout object to send back\n    let payoutObj: { [key: string]: string } = {};\n    // @ts-ignore\n    let curSeries = contract.seriesById.get(token.series_id) as Series;\n    if (curSeries == null) {\n        near.panic(\"no series\");\n    }\n    //get the royalty object from token\n    let royalty = curSeries.royalty;\n\n    //make sure we're not paying out to too many people (GAS limits this)\n    assert(Object.keys(royalty).length <= maxLenPayout, \"Market cannot payout to that many receivers\");\n    \n    //go through each key and value in the royalty object\n    Object.entries(royalty).forEach(([key, value], index) => {\n        //only insert into the payout if the key isn't the token owner (we add their payout at the end)\n        if (key != ownerId) {\n            payoutObj[key] = royaltyToPayout(value, balance);\n            totalPerpetual += value;\n        }\n    });\n\n    // payout to previous owner who gets 100% - total perpetual royalties\n    payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance);\n\n    //return the payout object\n    return {\n        payout: payoutObj\n    }\n}\n\n//transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. \nexport function internalNftTransferPayout({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    balance,\n    maxLenPayout\n}:{\n    contract: Contract, \n    receiverId: string, \n    tokenId: string,\n    approvalId: number,\n    memo: string,\n    balance: bigint,\n    maxLenPayout: number,\n}): { payout: {[key: string]: string }} {\n    //assert that the user attached 1 yocto NEAR for security reasons\n    assertOneYocto();\n    //get the sender ID\n    let senderId = near.predecessorAccountId();\n    //transfer the token to the passed in receiver and get the previous token object back\n    let previousToken: Token = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    //refund the previous token owner for the storage used up by the previous approved account IDs\n    refundApprovedAccountIds(\n        previousToken.owner_id,\n        previousToken.approved_account_ids,\n    );\n\n    //get the owner of the token\n    let ownerId = previousToken.owner_id;\n    //keep track of the total perpetual royalties\n    let totalPerpetual = 0;\n    //keep track of the payout object to send back\n    let payoutObj: { [key: string]: string } = {};\n    // @ts-ignore\n    let curSeries = contract.seriesById.get(token.series_id) as Series;\n    if (curSeries == null) {\n        near.panic(\"no series\");\n    }\n    //get the royalty object from token\n    let royalty = curSeries.royalty;\n\n    //make sure we're not paying out to too many people (GAS limits this)\n    assert(Object.keys(royalty).length <= maxLenPayout, \"Market cannot payout to that many receivers\");\n    \n    //go through each key and value in the royalty object\n    Object.entries(royalty).forEach(([key, value], index) => {\n        //only insert into the payout if the key isn't the token owner (we add their payout at the end)\n        if (key != ownerId) {\n            payoutObj[key] = royaltyToPayout(value, balance);\n            totalPerpetual += value;\n        }\n    });\n\n    // payout to previous owner who gets 100% - total perpetual royalties\n    payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance);\n\n    //return the payout object\n    return {\n        payout: payoutObj\n    }\n}","import { assert, near } from \"near-sdk-js\";\nimport { Contract } from \".\";\n\nexport function internalAddApprovedMinters({\n    contract,\n    accountId\n}:{ \n    contract: Contract, \n    accountId: string\n}): void {  \n    // Assert the predecessor is the current account ID\n    const predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId === near.currentAccountId(), \"Only the current account can add approved minters\");\n    \n    contract.approvedMinters.set(accountId);\n}\n\nexport function internalRemoveApprovedMinters({\n    contract,\n    accountId\n}:{ \n    contract: Contract, \n    accountId: string\n}): void {  \n    // Assert the predecessor is the current account ID\n    const predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId === near.currentAccountId(), \"Only the current account can remove approved minters\");\n    \n    contract.approvedMinters.remove(accountId);\n}\n\nexport function internalIsApprovedMinter({\n    contract,\n    accountId\n}:{ \n    contract: Contract, \n    accountId: string\n}): boolean {  \n    return contract.approvedMinters.contains(accountId);\n}\n\nexport function internalAddApprovedCreator({\n    contract,\n    accountId\n}:{ \n    contract: Contract, \n    accountId: string\n}): void {  \n    // Assert the predecessor is the current account ID\n    const predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId === near.currentAccountId(), \"Only the current account can add approved creators\");\n    \n    contract.approvedCreators.set(accountId);\n}\n\nexport function internalRemoveApprovedCreator({\n    contract,\n    accountId\n}:{ \n    contract: Contract, \n    accountId: string\n}): void {  \n    // Assert the predecessor is the current account ID\n    const predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId === near.currentAccountId(), \"Only the current account can remove approved creators\");\n    \n    contract.approvedCreators.remove(accountId);\n}\n\nexport function internalIsApprovedCreator({\n    contract,\n    accountId\n}:{ \n    contract: Contract, \n    accountId: string\n}): boolean {  \n    return contract.approvedCreators.contains(accountId);\n}","import { NearContract, NearBindgen, near, call, view, LookupMap, UnorderedMap, Vector, UnorderedSet, LookupSet } from 'near-sdk-js'\nimport { NFTContractMetadata, Token, TokenMetadata, internalNftMetadata } from './metadata';\nimport { internalCreateSeries, internalMint, internalUpdateSeriesId } from './series';\nimport { internalNftSupplyForSeries, internalNftTokens, internalNftTokensForSeries, internalSeries, internalSeriesInfo, internalSupplyForOwner, internalSupplySeries, internalTokensForOwner, internalTotalSupply } from './enumeration';\nimport { internalNftToken, internalNftTransfer, internalNftTransferCall, internalResolveTransfer } from './nft_core';\nimport { internalNftApprove, internalNftIsApproved, internalNftRevoke, internalNftRevokeAll } from './approval';\nimport { internalNftPayout, internalNftTransferPayout } from './royalty';\nimport { internalAddApprovedCreator, internalAddApprovedMinters, internalIsApprovedCreator, internalIsApprovedMinter, internalRemoveApprovedCreator, internalRemoveApprovedMinters } from './owner';\n\n/// This spec can be treated like a version of the standard.\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\n/// This is the name of the NFT standard we're using\nexport const NFT_STANDARD_NAME = \"nep171\";\n\n@NearBindgen\nexport class Contract extends NearContract {\n    owner_id: string;\n    approvedMinters: LookupSet;\n    approvedCreators: LookupSet;\n    seriesById: UnorderedMap;\n    tokensById: UnorderedMap;\n    tokensPerOwner: LookupMap;\n    metadata: NFTContractMetadata;\n\n    /*\n        initialization function (can only be called once).\n        this initializes the contract with metadata that was passed in and\n        the owner_id. \n    */\n    constructor({\n        owner_id, \n        metadata = {\n            spec: \"nft-1.0.0\",\n            name: \"NFT Tutorial Contract\",\n            symbol: \"GOTEAM\"\n        } \n    }) {\n        super()\n        this.owner_id = owner_id;\n        this.approvedMinters = new LookupSet(\"approvedMinters\");\n        this.approvedCreators = new LookupSet(\"approvedCreators\");\n        this.seriesById = new UnorderedMap(\"seriesById\");\n        this.tokensPerOwner = new LookupMap(\"tokensPerOwner\");\n        this.tokensById = new UnorderedMap(\"tokensById\");\n        this.metadata = metadata;\n    }\n\n    default() {\n        return new Contract({owner_id: ''})\n    }\n\n    /*\n        SERIES\n    */\n    @call\n    create_series({ id, metadata, royalty }) {\n        return internalCreateSeries({ contract: this, id: id, metadata: metadata, royalty: royalty });\n    }\n\n    @call\n    nft_mint({ id, receiver_id }) {\n        return internalMint({ contract: this, id: id, receiverId: receiver_id });\n    }\n\n    @call\n    update_series_id({ current_id, new_id }) {\n        return internalUpdateSeriesId({ contract: this, currentId: current_id, newId: new_id });\n    }\n\n    /*\n        CORE\n    */\n    @view\n    //get the information for a specific token ID\n    nft_token({ token_id }) {\n        return internalNftToken({ contract: this, tokenId: token_id });\n    }\n\n    @call\n    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. \n    nft_transfer({ receiver_id, token_id, approval_id, memo }) {\n        return internalNftTransfer({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo });\n    }\n\n    @call\n    //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\n    nft_transfer_call({ receiver_id, token_id, approval_id, memo, msg }) {\n        return internalNftTransferCall({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo, msg: msg });\n    }\n\n    @call\n    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n    //returns true if the token was successfully transferred to the receiver_id\n    nft_resolve_transfer({ authorized_id, owner_id, receiver_id, token_id, approved_account_ids, memo }) {\n        return internalResolveTransfer({ contract: this, authorizedId: authorized_id, ownerId: owner_id, receiverId: receiver_id, tokenId: token_id, approvedAccountIds: approved_account_ids, memo: memo });\n    }\n\n    /*\n        APPROVALS\n    */\n    @view\n    //check if the passed in account has access to approve the token ID\n    nft_is_approved({ token_id, approved_account_id, approval_id }) {\n        return internalNftIsApproved({ contract: this, tokenId: token_id, approvedAccountId: approved_account_id, approvalId: approval_id });\n    }\n\n    @call\n    //approve an account ID to transfer a token on your behalf\n    nft_approve({ token_id, account_id, msg }) {\n        return internalNftApprove({ contract: this, tokenId: token_id, accountId: account_id, msg: msg });\n    }\n\n    /*\n        ROYALTY\n    */\n    @view\n    //calculates the payout for a token given the passed in balance. This is a view method\n    nft_payout({ token_id, balance, max_len_payout }) {\n        return internalNftPayout({ contract: this, tokenId: token_id, balance: balance, maxLenPayout: max_len_payout });\n    }\n\n    @call\n    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. \n    nft_transfer_payout({ receiver_id, token_id, approval_id, memo, balance, max_len_payout }) {\n        return internalNftTransferPayout({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo, balance: balance, maxLenPayout: max_len_payout });\n    }\n\n    @call\n    //approve an account ID to transfer a token on your behalf\n    nft_revoke({ token_id, account_id }) {\n        return internalNftRevoke({ contract: this, tokenId: token_id, accountId: account_id });\n    }\n\n    @call\n    //approve an account ID to transfer a token on your behalf\n    nft_revoke_all({ token_id }) {\n        return internalNftRevokeAll({ contract: this, tokenId: token_id });\n    }\n\n    /*\n        ENUMERATION\n    */\n    @view\n    //Query for the total supply of NFTs on the contract\n    nft_total_supply() {\n        return internalTotalSupply({ contract: this });\n    }\n\n    @view\n    //Query for nft tokens on the contract regardless of the owner using pagination\n    nft_tokens({ from_index, limit }) {\n        return internalNftTokens({ contract: this, fromIndex: from_index, limit: limit });\n    }\n\n    @view\n    //get the total supply of NFTs for a given owner\n    nft_tokens_for_owner({ account_id, from_index, limit }) {\n        return internalTokensForOwner({ contract: this, accountId: account_id, fromIndex: from_index, limit: limit });\n    }\n\n    @view\n    //Query for all the tokens for an owner\n    nft_supply_for_owner({ account_id }) {\n        return internalSupplyForOwner({ contract: this, accountId: account_id });\n    }\n\n    @view\n    //Query for the total number of series \n    get_supply_series() {\n        return internalSupplySeries({ contract: this });\n    }\n\n    @view\n    //Paginate through all the series on the contract\n    get_series({ from_index, limit }) {\n        return internalSeries({ contract: this, fromIndex: from_index, limit: limit });\n    }\n\n    @view\n    // get info for a specific series\n    get_series_info({ id }) {\n        return internalSeriesInfo({ contract: this, id: id });\n    }\n\n    @view\n    //get the total supply of NFTs for a series\n    nft_supply_for_series({ id }) {\n        return internalNftSupplyForSeries({ contract: this, id: id });\n    }\n\n    @view\n    //Paginate through NFTs for a specific series\n    nft_tokens_for_series({ id, from_index, limit }) {\n        return internalNftTokensForSeries({ contract: this, id: id, fromIndex: from_index, limit: limit });\n    }\n\n    /*\n        METADATA\n    */\n    @view\n    //Query for all the tokens for an owner\n    nft_metadata() {\n        return internalNftMetadata({ contract: this });\n    }\n\n    /*\n        OWNER\n    */\n    @call\n    add_approved_minters({ account_id }) {\n        return internalAddApprovedMinters({ contract: this, accountId: account_id });\n    }  \n    \n    @call\n    remove_approved_minters({ account_id }) {\n        return internalRemoveApprovedMinters({ contract: this, accountId: account_id });\n    }\n\n    @view\n    is_approved_minter({ account_id }) {\n        return internalIsApprovedMinter({ contract: this, accountId: account_id });\n    }\n\n    @call\n    add_approved_creator({ account_id }) {\n        return internalAddApprovedCreator({ contract: this, accountId: account_id });\n    }\n\n    @call\n    remove_approved_creator({ account_id }) {\n        return internalRemoveApprovedCreator({ contract: this, accountId: account_id });\n    }\n\n    @view\n    is_approved_creator({ account_id }) {\n        return internalIsApprovedCreator({ contract: this, accountId: account_id });\n    }\n}"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","predecessorAccountId","predecessor_account_id","read_register","attachedDeposit","attached_deposit","panic","msg","storageRead","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","input","storageUsage","storage_usage","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","PromiseResult","promiseResult","resultIdx","status","promise_result","Successful","Failed","NotReady","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","data","u8ArrayToBytes","array","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","str","assert","b","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","prefix","index","Uint32Array","buffer","Vector","len","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","clear","toArray","v","vector","current","next","done","LookupSet","contains","keys","UnorderedMap","keyIndexPrefix","indexKey","indexValue","values","keysLen","valuesLen","keysIsEmpty","valuesIsEmpty","serializeIndex","deserializeIndex","rawIndex","getIndexRaw","indexLookup","indexRaw","nextIndex","nextIndexRaw","lastLookupKey","UnorderedMapIterator","kvs","k","unorderedMap","UnorderedSet","elementIndexPrefix","elementsPrefix","lastElement","lastLookupElement","Token","series_id","owner_id","approved_account_ids","next_approval_id","JsonToken","seriesId","tokenId","ownerId","metadata","approvedAccountIds","royalty","token_id","JsonSeries","Series","tokens","internalNftMetadata","contract","restoreOwners","collection","royaltyToPayout","royaltyPercentage","amountToPay","BigInt","toString","refundApprovedAccountIdsIter","storageReleased","bytesForApprovedAccountId","reduce","partialSum","a","amountToTransfer","valueOf","promise","refundApprovedAccountIds","refundDeposit","storageUsed","requiredCost","refund","assertAtLeastOneYocto","assertOneYocto","internalAddTokenToOwner","tokenSet","tokensPerOwner","internalRemoveTokenFromOwner","internalTransfer","senderId","receiverId","approvalId","memo","token","tokensById","hasOwnProperty","actualApprovalId","newToken","nextApprovalId","authorizedId","nftTransferLog","standard","NFT_STANDARD_NAME","version","NFT_METADATA_SPEC","event","authorized_id","old_owner_id","new_owner_id","token_ids","internalMint","id","initialStorageUsage","predecessor","approvedMinters","series","seriesById","curLen","copies","nftMintLog","requiredStorageInBytes","internalCreateSeries","internalUpdateSeriesId","currentId","newId","caller","GAS_FOR_RESOLVE_TRANSFER","GAS_FOR_NFT_ON_TRANSFER","internalNftToken","curSeries","editionNumber","split","title","jsonToken","internalNftTransfer","previousToken","internalNftTransferCall","sender_id","previous_owner_id","receiver_id","internalResolveTransfer","result","internalTotalSupply","internalNftTokens","fromIndex","limit","start","parseInt","max","internalSupplyForOwner","internalTokensForOwner","internalSupplySeries","internalSeries","internalSeriesInfo","jsonSeries","internalNftSupplyForSeries","internalNftTokensForSeries","jsonTokens","GAS_FOR_NFT_ON_APPROVE","internalNftApprove","isNewApproval","approval_id","internalNftIsApproved","approvedAccountId","approval","internalNftRevoke","internalNftRevokeAll","getPrototypeOf","internalNftPayout","balance","maxLenPayout","totalPerpetual","payoutObj","entries","forEach","payout","internalNftTransferPayout","internalAddApprovedMinters","internalRemoveApprovedMinters","internalIsApprovedMinter","internalAddApprovedCreator","approvedCreators","internalRemoveApprovedCreator","internalIsApprovedCreator","Contract","spec","name","symbol","create_series","nft_mint","update_series_id","current_id","new_id","nft_token","nft_transfer","nft_transfer_call","nft_resolve_transfer","nft_is_approved","approved_account_id","nft_approve","account_id","nft_payout","max_len_payout","nft_transfer_payout","nft_revoke","nft_revoke_all","nft_total_supply","nft_tokens","from_index","nft_tokens_for_owner","nft_supply_for_owner","get_supply_series","get_series","get_series_info","nft_supply_for_series","nft_tokens_for_series","nft_metadata","add_approved_minters","remove_approved_minters","is_approved_minter","add_approved_creator","remove_approved_creator","is_approved_creator"],"mappings":"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"}